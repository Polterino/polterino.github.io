31/30

3 ok. Remember a vulnerability is something that may be abused, not something that happens everytime.

1/10) Is the program leak20240716.c vulnerable to a buffer overflow of type stack smashing/control hijacking?

(If yes why, if no why)


Overall YES, but:

No, if the input is with only the one argc eg ./leak20240716 5, the program isn't vulnerable.

Yes, if the execution is like ./leak20240716 5 myFile.txt, in that case all the file myFile.txt is reads and since the methond while read to the end of the file it will rewrite the content of buf, even out of bounds 


3 ok

2/10) Is the program leak20240716.c vulnerable to an attack of type heap manipulation?

(If yes why, if no why)


Yes, the program leak20240716.c is vulnerable to an attack of type heap manipulation.

The strcpy function does not check the length of the source string src. This means if the length of src exceeds the allocated size of retval, it will cause a buffer overflow, writing beyond the allocated memory.


3 ok

3/10) Is the program leak20240716.c vulnerable to an attack of type stack information exfiltration?

(If yes why, if no why)


No, is not vulnerable to stack information exfiltration. the program not print any value of buf that are out of bounds, use i that it's equal to size, as a upper bound 


3 ok

4/10) Is the program leak20240716.c vulnerable to an attack of type heap information exfiltration?

(If yes why, if no why)


No, the program is not vulnerable to heap information exfiltration. Because strcpy allocated on the heap does not expose any heap-specific information that could leak information about the heap.


3 ok

5/10) Is the program leak20240716.c vulnerable to any of the previously mentioned attacks if stack protectors (canaries) are in place?

(If yes why, if no why)


Yes, the program leak20240716.c is still vulnerable to heap manipulation and heap information exfiltration attacks even if stack protectors (canaries) are in place. 

Stack protectors guard against stack overflow, but they do not address vulnerabilities related to the heap.

If the canaries are in place, they prevent from the buffer overflow of question 1


3 ok

6/10) Can not executable stack prevent the return loop in loop3-20240716.c?

(If yes why, if no why)


No, a non-executable stack does not prevent the return loop because the vulnerability exploits out-of-bounds writes, not stack execution.


3 ok

7/10) Can stack protectors (canaries) prevent the return loop in loop3-20240716.c?

(If yes why, if no why)


No, stack protectors cannot prevent the return loop because the modification occurs beyond the bounds, but we are directly modifie the retur address, '((int)(&(buf[SIZE + 5]))) = &loop;'

If we add canaries, it's still possible to use ((int)(&(buf[SIZE + 5]))) = &loop; but we need to use SIZE + 6 instand of SIZE + 5 since there is a canary


3 ok

8/10) Can ASLR prevent the return loop in loop3-20240716.c?

(If yes why, if no why)


No, ASLR add randomization of address, so if we used the absolute address of the loop function, e.g. (0x79279274), add ASLR prevent the loop,

but we are using &loop, that take the address of function at execution time.


3 ok

9/10) Assume you know the address of a http server with the shellshock vulnerability and a myCommand CGI program available (in the default CGI-BIN folder).

Write the curl command that makes an http request that exploits the shellshock vulnerability and executes the "cat /etc/passwd" command redirecting output to a /tmp/log.txt file


curl -A "() { echo hello;}; echo Content_type: text/plain; echo; /bin/cat /etc/passwd > /tmp/log.txt" http://address/cgi-bin/myCommand.cgi


10/10) Does ASLR protect from a return to libc attack?

(If yes why, if no why)


3 ok

No, ASLR does not protect against return to libc attacks.

ret2libc need to know exact addresses of functions in memory. ASLR randomizes the addresses of executables but does not prevent an attacker from finding the addresses of functions. So it's still possible to find that address, e.g. with multiple execution.
