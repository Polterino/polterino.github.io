[
	{
		"question": "What do devices need to communicate?",
		"options": [
			"A physical address",
			"All of them",
			"Network address",
			"Set of protocols"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What is packet sniffing?",
		"options": [
			"The attacker blocks the communication between two or multiple nodes",
			"The attacker impersonates another by changing the packet's transmitter address",
			"The attackers capture and analyze the communication among other nodes"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "What does an attacker need to sniff packets?",
		"options": [
			"To be able to manipulate packets",
			"A powerful device",
			"To be connected to the communication medium of the victim"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Choose the option(s) that holds true for the NIC card",
		"options": [
			"It's sole purpose is spoofing",
			"It is a physical and logical interface for communications",
			"It is associated with an IP address",
			"It communicates with the kernel to pass packets to the user interface"
		],
		"correctAnswer": [1, 3],
		"verified": 1
	},
	{
		"question": "The promiscuous mode is needed to:",
		"options": [
			"Discard packets not intended to the receiver NIC",
			"Pass to the kernel packets with MAC address different from the NIC one",
			"Capture packets in a wireless network",
			"Change the IP address of the sender of the current packet"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What is spoofing?",
		"options": [
			"The process where all packets in the network are captured by the attacker",
			"The process by which some critical information in the packet is forged",
			"The process where the MAC address of the sender is changed",
			"The process where the IP address of the sender is changed"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What is a smurf attack?",
		"options": [
			"A spoofing attack in ICMP to overload a victim",
			"A spoofing attack in TCP to overload a victim",
			"A spoofing attack in ICMP to overload the whole network"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Which of the following statements is correct?",
		"options": [
			"TCP and UDP are equal alternatives layer 4 protocols",
			"TCP is connection-based, UDP is connectionless",
			"TCP is connectionless, UDP is connection-based"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What is a network port?",
		"options": [
			"A specific protocol that uniquely defines a connection",
			"A software component to establish a connection",
			"A physical device to connect network cables to",
			"A 16 bits identifier"
		],
		"correctAnswer": 3,
		"verified": 1
	},
	{
		"question": "Select the sentence that holds true for the three-way handshake.",
		"options": [
			"In TCP, the client and server exchange three messages to establish a communication session",
			"In TCP, it is a procedure to terminate a communication session",
			"In UDP, the client and server exchange three messages to establish a communication session",
			"In TCP, it is a procedure to exchange single data packets"
		],
		"correctAnswer": 0,
		"verified": 1
	},
    {
		"question": "What is the purpose of the TCP RST packet?",
		"options": [
			"It informs the server that the client wants to terminate a connection",
			"It informs the server that the client wants to establish a connection",
			"It initializes the sequence number of successive packets"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Select the option that holds true for the SYN attack",
		"options": [
			"It is a denial of service attack towards TCP exploiting the first packet of the 3-way handshake",
			"It is a denial of service attack towards TCP exploiting the last packet of the 3-way handshake",
			"It is a denial of service attack towards UDP exploiting the first packet of the 3-way handshake",
			"It exploits the lack of authentication of the RST packet"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "What does an attacker need to launch a successful RST attack?",
		"options": [
			"The private key of the victim",
			"The RST identifier of the victim",
			"The IP address of the victim",
			"The sequence number of the SYN packet"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "What is the effect of an RST Hijacking attack?",
		"options": [
			"Gain control over the victim connection",
			"Causing a denial of service to the victim",
			"Cause an out of order error to the received TCP packets"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Buffer overflow attacks result from careless programming in applications.",
		"options": [
			"True",
			"False"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "The only consequence of a buffer overflow attack is the possible corruption of data used by the program.",
		"options": [
			"True",
			"False"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "To exploit any type of buffer overflow the attacker needs to understand how that buffer will be stored in the processes memory.",
		"options": [
			"False",
			"True"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "The JAVA programming language is extremely vulnerable to buffer overflows.",
		"options": [
			"True",
			"False"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What happens when a buffer is overflowed?",
		"options": [
			"Whatever is in the memory space that comes after the buffer is overwritten",
			"The memory space that comes after the buffer holds the extra data as well as keeping the data that it contained before"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "What does a typical C program usually use stacks for?",
		"options": [
			"For preventing buffer overflows",
			"Permanent storage of variables",
			"Temporary storage of variables"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "If you declare an array as A[100] in C and you try to write data to A[555], what will happen?",
		"options": [
			"Nothing",
			"The C compiler will give you an error and wonâ€™t compile",
			"Whatever is at A[555] will be overwritten"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "What can be overwritten by a buffer overflow that causes a security problem?",
		"options": [
			"Permanent data saved on the computer",
			"The original binary code of the program",
			"Any kind of pointer"
		],
		"correctAnswer": 2,
		"verified": 1
	},
    {
		"question": "What are the techniques used to eliminate zero bytes from shellcode?",
		"options": [
			"All of them",
			"Shift-Left and Shift-Right Technique",
			"XOR Technique",
			"Assigning values to the lower portions of registers, such as using mov al, 0x99 instead of mov eax, 0x00000099"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Why does the attacker have to collect information about the architecture of the victim machine to perform a shellcode attack?",
		"options": [
			"Because the shellcode contains binary code which depends on the underlying machine architecture",
			"Because the shellcode will be compiled by the target victim machine",
			"Because the shellcode will be sent over the network towards the target victim machine"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Why does an attacker have to prevent the introduction of zero values inside a shellcode?",
		"options": [
			"Because the zero value cannot be represented through assembly code",
			"Because the zero value cannot be pushed on the stack",
			"Because the zero character is the termination character of strings and it affects some C functions"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Which of the following techniques is used to obtain the address of a hardcoded string in the shellcode?",
		"options": [
			"Return-Oriented Programming (ROP)",
			"Call-Pop Technique",
			"XOR Technique"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Which register is used to store the <u>first argument</u> of a system call in x86 assembly during a shellcode execution?",
		"options": [
			"ecx",
			"eax",
			"ebx"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Which instruction is used to invoke a system call in 64-bit Linux assembly?",
		"options": [
			"int 0x80",
			"ret",
			"syscall"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Which of the following assembly instructions is used to move the stack pointer to the address of a string in x86 shellcode?",
		"options": [
			"mov esp, ebx",
			"mov ebx, esp",
			"push esp"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Which of the following registers is used to store the <u>system call number</u> for execve() in x86 assembly?",
		"options": [
			"eax",
			"ecx",
			"ebx"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Which attack bypasses the non-executable stack countermeasure?",
		"options": [
			"Buffer overflow",
			"Return to libc",
			"Shellcode"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "In the function epilogue, the previous frame pointer, which is stored in the area below the return address, will be retrieved and assigned to the ebp register. However, when we overflow the return address, the previous frame pointer region is already modified, so after the function epilogue, ebp contains some arbitrary value. Does this matter?",
		"options": [
			"It depends",
			"No",
			"Yes"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Can address space layout randomization help defeat the return-to-libc attack?",
		"options": [
			"No",
			"Yes"
		],
		"correctAnswer": 0,
		"verified": 1
	},{
		"question": "Why do we need to know technical details about the function prologue and function epilogue to perform a return to libc attack?",
		"options": [
			"Because function prologue and function epilogue allow to pass the arguments to the system() function",
			"Because we exploit the ebp register to pass the arguments to the system() function and we need to know when the ebp value changes",
			"Because function prologue and epilogue are part of the implementation of the system() function"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Can the return to libc attack be implemented only through the system() function?",
		"options": [
			"Yes",
			"No"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Which feature is mandatory for a gadget?",
		"options": [
			"It should be injected by the attacker",
			"It should end with the ret assembly instruction",
			"It should be overwritten"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "A ROP attack is an extended version of",
		"options": [
			"The shellcode attack",
			"The buffer overflow attack",
			"The return to libc attack"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Can we use the stack canaries idea to protect against format-string attacks?",
		"options": [
			"Yes",
			"No"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What is the main vulnerability exploited through a format string attack?",
		"options": [
			"The mismatch between the type of the format specifiers and the provided arguments",
			"The mismatch between the number of format specifiers and the provided arguments",
			"The use of format specifiers"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "The %s format specifier",
		"options": [
			"prints a string in the fetched address",
			"considers the next fetched value as an integer and prints it",
			"considers the next fetched value as an address and retrieves data from it"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "The %x format specifier",
		"options": [
			"considers the next fetched value as an integer and prints it",
			"considers the next fetched value as an address and retrieves data from it",
			"considers the next fetched value as an address and writes data into it"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "The %n format specifier",
		"options": [
			"considers the next fetched value as an address and writes arbitrary data into it",
			"considers the next fetched value as an address and writes the number of printed characters into it",
			"considers the next fetched value as an address and retrieves data from it"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "What is the main vulnerability exploited in SQL injection attack?",
		"options": [
			"Data channel and code channel are mixed",
			"The user can input data in the web application",
			"The web application relies on an external database"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "A SQL injection attack ...",
		"options": [
			"... can be performed only if the user input values are sent over an HTTP POST request",
			"... can be performed only if the user input values are sent over an HTTP GET request",
			"... it does not depend on the type of request"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Is the following SQL statement vulnerable to SQL injection attacks?",
		"options": [
			"Yes",
			"No"
		],
		"code": "code/query.php",
		"correctAnswer": 1,
		"motivation": "This query is actually vulnerable to SQL injection attacks because SHA2() function is interpreted as SQL code instead of php code, but since this question was taken from the quiz on moodle, for a reason I don't know the answer reported as correct is No",
		"verified": 1
	},
	{
		"question": "To defeat SQL injection attacks, a web application has implemented a filtering scheme at the client side: basically, on the page where users type their data, a filter is implemented using JavaScript. It removes any special characters for comments, and keywords reserved for SQL statements. Is this solution enough to prevent SQL injection attacks?",
		"options": [
			"No",
			"Yes"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "The prepared statement countermeasure can only work ...",
		"options": [
			"... if the user input are sent over any HTML request",
			"... if the user input are sent over an HTTP POST request",
			"... if the user input are sent over an HTTP GET request"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "If the input parameters you use for a SQL injection attack are sent over an HTTP GET request, can you just copy/paste the parameters on the URL as you enter them in the web app?",
		"options": [
			"Yes",
			"No"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "ASLR randomizes",
		"options": [
			"the stack base address in the memory",
			"the address of a specific function frame on the stack",
			"the internal offsets within the program stack"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Which attack is prevented through the nonexecutable stack countermeasure?",
		"options": [
			"All the buffer overflow attacks",
			"A buffer overflow attack aimed to modify the program data",
			"Shellcode attack"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "The stack canary value",
		"options": [
			"is hardcoded in the program",
			"is retrieved runtime at the first execution of the program",
			"is retrieved at runtime for every new execution of the program"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Stack canaries",
		"options": [
			"are automatically introduced by the compiler if the associated flag is specified during the compilation of the program",
			"are introduced by the program developers",
			"are automatically introduced by the compiler"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Select the correct statement",
		"options": [
			"the OS and compiler approaches are alternative to each other",
			"the OS and compiler approaches are effective only if there are no developer approaches",
			"the OS and compiler approaches are always effective"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Stack canaries prevent",
		"options": [
			"data-oriented bof attacks",
			"any type of bof attacks (i.e., both data-oriented and control-flow-oriented bof attacks)",
			"control-flow-oriented bof attacks"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "What is the purpose of a return-to-like attack?",
		"options": [
			"Return-to-like attacks aim to bypass ASLR and execute predefined sequences of existing library functions to carry out specific actions.",
			"Return-to-like attacks involve redirecting the program's execution flow to arbitrary memory addresses, allowing the execution of malicious code.",
			"Return-to-like attacks exploit vulnerabilities in the computer's memory management system to gain arbitrary code execution privileges."
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Which countermeasure is effective against return-to-like attack?",
		"options": [
			"Control Flow integrity, which enforce strict control over the program's execution flow, preventing deviations or unauthorized jumps to non-intended locations.",
			"Address Space Layout Randomization",
			"Stack canaries"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "When you perform a shellcode attack, you have to make the program jump:",
		"options": [
			"to any address before the location of the shellcode cause the stack pointer will move along the stack until it finds the shellcode",
			"to any address before the location of the shellcode, but after the return address, cause the stack pointer will move along the stack until it finds the shellcode",
			"exactly at the address where the shellcode has been placed"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Select the appropriate role of the eax, ebx and ecx registers when performing a shellcode attack:",
		"options": [
			"eax contains the zero value; ebx points to argv[0]; ecx points to argv",
			"eax contains the system call number; ebx points to argv[0]; ecx points to argv",
			"eax contains the system call number; ebx points to argv; ecx points to argv[0]"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Gadgets used to perform a Return Oriented Programming (ROP) attack",
		"options": [
			"are assembly instructions that the attacker makes the program jump to in order to change its runtime behavior",
			"are source code instructions that the attacker makes the program jump to in order to change its runtime behavior",
			"are assembly instructions that the attacker injects into the victim program"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Packet sniffing refers to the process of:",
		"options": [
			"Overhearing live communications between legitimate network entities",
			"Changing sensitive information in a packet to trick the receiver",
			"Intercepting communication between two hosts to manipulate packets"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "In a Smurf attack, the attacker:",
		"options": [
			"Spoof an ICMP packet using as sender address the victim's address",
			"Spoof an ICMP packet using as receiver address the victim's address",
			"Spoof an TCP packet using as sender address the victim's address"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "A reflected XSS attack:",
		"options": [
			"the attacker exploits a link sent to the victim",
			"the attacker stores the malicious code on a server",
			"the attacker stores and executes the code directly on the browser"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "In a DOM-based XSS attack, the sink:",
		"options": [
			"executes the script to e.g., display sensitive information",
			"sanitizes the input to prevent the execution of the attack",
			"interacts with a server to retrieve the attacker's code"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "What is the most generic set of pre-requisites for an attacker to complete a CSRF attack?",
		"options": [
			"Crafting a cross-site request; making the victim send the cross-site request crafted by the attacker (e.g., by visiting a malicious web page); appending the victim session cookie to the cross-site request",
			"Having the victim under an active session on the target website; crafting a cross-site request; making the victim send the cross-site request crafted by the attacker (e.g., by visiting a malicious web page)",
			"Having the victim under an active session on the target website; crafting a cross-site request; making the victim click on the link crafted by the attacker which will send the cross-site request"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Select which is the main vulnerability that leads to a CSRF attack among the following ones:",
		"options": [
			"Browsers attaching session cookies indiscriminately to any request towards the target website",
			"Victim having an active session on the target website",
			"Cross-site requests"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "In a SYN flooding attack",
		"options": [
			"The attacker always modifies the sender IP address",
			"The attacker overloads the receiver's packet buffer causing a denial of service",
			"The attacker takes control of an existing connection"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Select which information is mandatory to be known by the attacker in order to successfully perform a SQL injection attack, assuming he can only interact with the web page of the victim website.",
		"options": [
			"The exact structure of the SQL query performed against the SQL database on the server",
			"The exact structure of the SQL database on the server",
			"The website sanitizers applied on the client side"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "XSS takes advantage of",
		"options": [
			"the fact that web applications execute scripts in a distributed fashion",
			"the fact that web applications execute scripts on remote servers",
			"the fact that web applications execute scripts on the users' browser"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "Select the option that holds true for TCP Hijacking",
		"options": [
			"The attacker takes control of an existing connection",
			"The attacker causes a denial of service to an existing connection",
			"The attacker creates a new connection impersonating another user"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "A transaction in a blockchain is",
		"options": [
			"a list of multiple exchanges that needs to be validated via a consensus algorithm",
			"a string in a list of records including, among the others, the sender and receiver addresses, and the amount exchanged",
			"a pointer to a digital currency (e.g., Bitcoin) exchanged among users"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "An Ethereum smart contract is",
		"options": [
			"bytecode stored in a transaction",
			"a computer program stored in a specific node in the blockchain",
			"a computer program written in solidity that simultaneously run over the whole blockchain network"
		],
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "A firewall",
		"options": [
			"Only filters packet coming from the internal network",
			"Only filters packet coming from the external network",
			"Connects the internal network to a demilitarized zone and hence to external networks"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "The following hook function",
		"options": [
			"blocks UDP packets if their destination IP is 8.8.8.8 and the destination port is 53",
			"allows UDP packets only if their destination IP is 8.8.8.8 and the destination port is 53",
			"blocks all packets, except UDP packets if their destination IP is 8.8.8.8 and the destination port is 53"
		],
		"code": "code/firewall.c",
		"correctAnswer": 0,
		"verified": 1
	},
	{
		"question": "Packet spoofing refers to the process of:",
		"options": [
			"passively listening to an information exchange process",
			"masquerading as a known entity in the system",
			"sending malformed packets to cause unexpected behavior at the receiver (e.g., reverse shell)"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "The following query is performed in the back-end of a web page that allows the user to update his/her nickname and email address (the ID is automatically retrieved from the web page and it is equal to 25)<br>If the user insert the following input into the nickname web field<br>', salary='999999<br>which will be the query performed by the server?",
		"options": [
			"$sql = \"UPDATE credential set salary='999999' WHERE ID='25';\";",
			"$sql = \"UPDATE credential set nickname='', salary='999999', email='' WHERE ID='25';\";",
			"$sql = \"UPDATE credential set nickname=, salary=999999, email= WHERE ID=25;\";"
		],
		"code": "code/update_query.php",
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Which one is <u>NOT</u> a vulnerability that can lead to CSRF",
		"options": [
			"Lack of same-origin policy enforcement",
			"Improper input validation",
			"Lack of CSRF tokens"
		],
		"correctAnswer": 1,
		"verified": 1
	},
	{
		"question": "Assuming that a website has enabled the countermeasures against CSRF attacks. Select which cookies are transmitted in case of a POST cross-site request",
		"options": [
			"Normal cookie and lax cookie",
			"Normal cookie and strict cookie",
			"Normal cookie"
		],
		"correctAnswer": 2,
		"verified": 1
	},
	{
		"question": "What type of code does shellcode typically consist of?",
		"options": [
			"Assembly instructions to open a commmand prompt",
			"Machine code to execute a specific action",
			"Encrypted data to bypass security measures"
		],
		"correctAnswer": [0,1],
		"motivation": "Initially \"Assembly instructions\" answer was the only one correct, but since even the \"Machine code\" one is also correct the professor agreed to count both of them as correct",
		"verified": 1
	},
	{
		"question": "What precautionary measure can mitigate the risk of shellcode injection?",
		"options": [
			"Implementing stack canaries",
			"Disable system logging",
			"Increasing the size of input buffers"
		],
		"correctAnswer": 0,
		"verified": 1
	}
]
